@page "/person/{Id:long?}"
@inject PersonService PersonService
@inject NavigationManager NavigationManager

<PageTitle>@Title</PageTitle>

<EditForm Model="Model" OnValidSubmit="HandleSubmit" FormName="PersonForm" class="card mb-4 border rounded shadow">
    <DataAnnotationsValidator />

    <div class="card-header">@Title</div>

    <div class="card-body">
        <div class="mb-3">
            <label for="Name" class="form-label">
                Name
            </label>
            <InputText @bind-Value="Model.Name" id="Name" class="form-control" />
            <ValidationMessage For="() => Model.Name" class="text-danger" />
        </div>
    </div>

    <div class="card-footer">
        <div class="hstack flex-row-reverse justify-content-between">
            <button type="submit" class="btn btn-primary">
                Save
            </button>

            @if (Model.Id != 0)
            {
                <button type="button" @onclick="HandleDelete" class="btn btn-outline-danger">
                    Delete
                </button>
            }
        </div>
    </div>

    <input type="hidden" asp-for="Id" />
</EditForm>

@code {
    [Parameter]
    public long? Id { get; set; }

    PersonDto Model = new ();

    string Title => Id.HasValue ? "Edit Person" : "New Person";

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
            Model = await PersonService.GetPersonAsync(Id.Value);
    }

    async Task HandleSubmit()
    {
        if (Id.HasValue)
            await PersonService.UpdatePersonAsync(Model);
        else
            await PersonService.CreatePersonAsync(Model);

        NavigationManager.NavigateTo("/");
    }

    async Task HandleDelete()
    {
        await PersonService.DeletePersonAsync(Model.Id);
        NavigationManager.NavigateTo("/");
    }
}